import streamlit as st
import pandas as pd
import requests
from datetime import datetime, timedelta

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ---
st.set_page_config(page_title="GitHub Monitor", layout="wide")

st.title("üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—î–∫—Ç—ñ–≤ GitHub")

# --- –í–≤—ñ–¥ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ---
st.sidebar.header("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
repos_input = st.sidebar.text_area(
    "–í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó–≤ (—Ñ–æ—Ä–º–∞—Ç: owner/repo, –∫–æ–∂–µ–Ω –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞):",
    "torvalds/linux\nmicrosoft/vscode\ntensorflow/tensorflow"
)

token = st.sidebar.text_input("GitHub Access Token (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)", type="password")

if st.sidebar.button("üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ"):
    repos = [r.strip() for r in repos_input.split("\n") if r.strip()]
    headers = {"Authorization": f"token {token}"} if token else {}

    all_data = []
    since = (datetime.utcnow() - timedelta(days=30)).isoformat() + "Z"

    st.info("‚è≥ –ó–±–∏—Ä–∞—é –¥–∞–Ω—ñ –∑ GitHub...")

    for repo_name in repos:
        # --- –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é ---
        repo_url = f"https://api.github.com/repos/{repo_name}"
        commits_url = f"https://api.github.com/repos/{repo_name}/commits?since={since}"

        repo_resp = requests.get(repo_url, headers=headers)
        repo_data = repo_resp.json()

        commits_resp = requests.get(commits_url, headers=headers)
        commits_data = commits_resp.json()

        # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ª—ñ–º—ñ—Ç API ---
        if isinstance(repo_data, dict) and repo_data.get("message") == "API rate limit exceeded":
            st.error("‚õî –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ GitHub API! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ç–æ–∫–µ–Ω.")
            st.stop()

        commits_count = len(commits_data) if isinstance(commits_data, list) else 0

        # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É ---
        all_data.append({
            "–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π": repo_name,
            "‚≠ê –ó—ñ—Ä–∫–∏": repo_data.get("stargazers_count", 0),
            "üç¥ –§–æ—Ä–∫–∏": repo_data.get("forks_count", 0),
            "üêû –í—ñ–¥–∫—Ä–∏—Ç—ñ issues": repo_data.get("open_issues_count", 0),
            "üí¨ –ö–æ–º—ñ—Ç–∏ (30 –¥–Ω—ñ–≤)": commits_count
        })

    # --- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è DataFrame ---
    df = pd.DataFrame(all_data)

    # --- –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –∑—ñ—Ä–∫–∞–º–∏ ---
    df_sorted = df.sort_values("‚≠ê –ó—ñ—Ä–∫–∏", ascending=False).reset_index(drop=True)
    st.subheader("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ—î–∫—Ç—ñ–≤ –∑–∞ –∑—ñ—Ä–∫–∞–º–∏")
    st.dataframe(df_sorted, use_container_width=True)

    # --- –ì—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ---
    st.subheader("üìà –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ–º—ñ—Ç—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤")
    st.bar_chart(df.set_index("–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π")["üí¨ –ö–æ–º—ñ—Ç–∏ (30 –¥–Ω—ñ–≤)"])

    # --- –ê–Ω–∞–ª—ñ–∑ –¥–∏–Ω–∞–º—ñ–∫–∏ ---
    st.subheader("üß† –ê–Ω–∞–ª—ñ–∑ –¥–∏–Ω–∞–º—ñ–∫–∏ —Ä–æ–∑—Ä–æ–±–∫–∏")
    for _, row in df.iterrows():
        st.write(
            f"- **{row['–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π']}**: {row['üí¨ –ö–æ–º—ñ—Ç–∏ (30 –¥–Ω—ñ–≤)']} –∫–æ–º—ñ—Ç—ñ–≤, "
            f"{row['üêû –í—ñ–¥–∫—Ä–∏—Ç—ñ issues']} issues, {row['‚≠ê –ó—ñ—Ä–∫–∏']} ‚≠ê"
        )
